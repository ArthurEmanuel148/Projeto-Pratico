package br.org.cipalam.cipalam_sistema.controller;

import br.org.cipalam.cipalam_sistema.dto.FamiliaDocumentosDTO;
import br.org.cipalam.cipalam_sistema.service.ResponsavelDocumentosService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.HashMap;
import java.util.Map;

@RestController
@RequestMapping("/api/responsavel")
@CrossOrigin(origins = "*")
public class ResponsavelDocumentosController {

    private static final Logger logger = LoggerFactory.getLogger(ResponsavelDocumentosController.class);

    @Autowired
    private ResponsavelDocumentosService responsavelDocumentosService;

    /**
     * Busca todos os documentos da fam√≠lia organizados por pessoa
     * GET /api/responsavel/{idResponsavel}/documentos
     */
    @GetMapping("/{idResponsavel}/documentos")
    public ResponseEntity<?> buscarDocumentosFamilia(@PathVariable Long idResponsavel) {
        try {
            logger.info("üîç Buscando documentos da fam√≠lia para respons√°vel ID: {}", idResponsavel);

            if (idResponsavel == null || idResponsavel <= 0) {
                logger.warn("‚ö†Ô∏è ID do respons√°vel inv√°lido: {}", idResponsavel);
                Map<String, Object> error = new HashMap<>();
                error.put("erro", "ID do respons√°vel √© obrigat√≥rio e deve ser v√°lido");
                error.put("codigo", "INVALID_RESPONSIBLE_ID");
                return ResponseEntity.badRequest().body(error);
            }

            // Buscar documentos da fam√≠lia
            FamiliaDocumentosDTO familiaDocumentos = responsavelDocumentosService
                    .buscarDocumentosPorFamilia(idResponsavel);

            if (familiaDocumentos == null) {
                logger.warn("‚ö†Ô∏è Nenhum documento encontrado para o respons√°vel ID: {}", idResponsavel);
                Map<String, Object> error = new HashMap<>();
                error.put("erro", "Fam√≠lia n√£o encontrada ou sem documentos configurados");
                error.put("codigo", "FAMILY_NOT_FOUND");
                return ResponseEntity.status(HttpStatus.NOT_FOUND).body(error);
            }

            logger.info("‚úÖ Documentos da fam√≠lia encontrados: {} pessoas, {} documentos totais",
                    familiaDocumentos.getDocumentosPorPessoa().size(),
                    familiaDocumentos.getResumo().getTotalDocumentos());

            return ResponseEntity.ok(familiaDocumentos);

        } catch (Exception e) {
            logger.error("‚ùå Erro inesperado ao buscar documentos da fam√≠lia para respons√°vel ID {}: {}",
                    idResponsavel, e.getMessage(), e);

            Map<String, Object> error = new HashMap<>();
            error.put("erro", "Erro interno do servidor ao buscar documentos da fam√≠lia");
            error.put("codigo", "INTERNAL_SERVER_ERROR");
            error.put("detalhes", e.getMessage());

            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(error);
        }
    }

    /**
     * Busca informa√ß√µes b√°sicas do respons√°vel e fam√≠lia
     * GET /api/responsavel/{idResponsavel}/info
     */
    @GetMapping("/{idResponsavel}/info")
    public ResponseEntity<?> buscarInformacoesResponsavel(@PathVariable Long idResponsavel) {
        try {
            logger.info("üîç Buscando informa√ß√µes do respons√°vel ID: {}", idResponsavel);

            if (idResponsavel == null || idResponsavel <= 0) {
                logger.warn("‚ö†Ô∏è ID do respons√°vel inv√°lido: {}", idResponsavel);
                Map<String, Object> error = new HashMap<>();
                error.put("erro", "ID do respons√°vel √© obrigat√≥rio e deve ser v√°lido");
                error.put("codigo", "INVALID_RESPONSIBLE_ID");
                return ResponseEntity.badRequest().body(error);
            }

            // Buscar informa√ß√µes b√°sicas
            Map<String, Object> informacoes = responsavelDocumentosService.buscarInformacoesResponsavel(idResponsavel);

            if (informacoes == null || informacoes.isEmpty()) {
                logger.warn("‚ö†Ô∏è Respons√°vel n√£o encontrado para ID: {}", idResponsavel);
                Map<String, Object> error = new HashMap<>();
                error.put("erro", "Respons√°vel n√£o encontrado");
                error.put("codigo", "RESPONSIBLE_NOT_FOUND");
                return ResponseEntity.status(HttpStatus.NOT_FOUND).body(error);
            }

            logger.info("‚úÖ Informa√ß√µes do respons√°vel encontradas: {}", informacoes.get("nome"));
            return ResponseEntity.ok(informacoes);

        } catch (Exception e) {
            logger.error("‚ùå Erro inesperado ao buscar informa√ß√µes do respons√°vel ID {}: {}",
                    idResponsavel, e.getMessage(), e);

            Map<String, Object> error = new HashMap<>();
            error.put("erro", "Erro interno do servidor ao buscar informa√ß√µes do respons√°vel");
            error.put("codigo", "INTERNAL_SERVER_ERROR");
            error.put("detalhes", e.getMessage());

            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(error);
        }
    }

    /**
     * Busca estat√≠sticas dos documentos da fam√≠lia
     * GET /api/responsavel/{idResponsavel}/estatisticas
     */
    @GetMapping("/{idResponsavel}/estatisticas")
    public ResponseEntity<?> buscarEstatisticasDocumentos(@PathVariable Long idResponsavel) {
        try {
            logger.info("üìä Buscando estat√≠sticas de documentos para respons√°vel ID: {}", idResponsavel);

            if (idResponsavel == null || idResponsavel <= 0) {
                logger.warn("‚ö†Ô∏è ID do respons√°vel inv√°lido: {}", idResponsavel);
                Map<String, Object> error = new HashMap<>();
                error.put("erro", "ID do respons√°vel √© obrigat√≥rio e deve ser v√°lido");
                error.put("codigo", "INVALID_RESPONSIBLE_ID");
                return ResponseEntity.badRequest().body(error);
            }

            // Buscar estat√≠sticas
            Map<String, Object> estatisticas = responsavelDocumentosService.buscarEstatisticasDocumentos(idResponsavel);

            if (estatisticas == null || estatisticas.isEmpty()) {
                logger.warn("‚ö†Ô∏è Nenhuma estat√≠stica encontrada para respons√°vel ID: {}", idResponsavel);
                Map<String, Object> error = new HashMap<>();
                error.put("erro", "Estat√≠sticas n√£o encontradas");
                error.put("codigo", "STATISTICS_NOT_FOUND");
                return ResponseEntity.status(HttpStatus.NOT_FOUND).body(error);
            }

            logger.info("‚úÖ Estat√≠sticas encontradas para respons√°vel ID: {}", idResponsavel);
            return ResponseEntity.ok(estatisticas);

        } catch (Exception e) {
            logger.error("‚ùå Erro inesperado ao buscar estat√≠sticas para respons√°vel ID {}: {}",
                    idResponsavel, e.getMessage(), e);

            Map<String, Object> error = new HashMap<>();
            error.put("erro", "Erro interno do servidor ao buscar estat√≠sticas");
            error.put("codigo", "INTERNAL_SERVER_ERROR");
            error.put("detalhes", e.getMessage());

            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(error);
        }
    }
}
